--- source code ---

			package main

			//go:generate gosb -source=input.go
			type A struct {
				F1 int
			}

			type B struct {
				F2 int
			}

			//go:generate gosb -source=input.go
			type C struct {
				F3 int
			}


--- generated code ---

// Code generated by go-struct-builder. DO NOT EDIT.
// Source: input.go

package main

import (
	"errors"
)

type ABuilder struct {
	x    *A
	mask []byte
}

func NewABuilder() *ABuilder {
	/**
	Required fields:
	1) F1 int
	*/

	return &ABuilder{
		x:    new(A),
		mask: []byte{0x2},
	}
}

func (b *ABuilder) SetF1(v int) *ABuilder {
	b.x.F1 = v
	b.mask[1/8] &= ^uint8(1 << 1 % 8)
	return b
}

func (b *ABuilder) Build() (*A, error) {
	if (b.mask[1/8] & (1 << 1 % 8)) != 0 {
		return nil, errors.New("A.F1 field is not provided")
	}

	return b.x, nil
}

type CBuilder struct {
	x    *C
	mask []byte
}

func NewCBuilder() *CBuilder {
	/**
	Required fields:
	1) F3 int
	*/

	return &CBuilder{
		x:    new(C),
		mask: []byte{0x2},
	}
}

func (b *CBuilder) SetF3(v int) *CBuilder {
	b.x.F3 = v
	b.mask[1/8] &= ^uint8(1 << 1 % 8)
	return b
}

func (b *CBuilder) Build() (*C, error) {
	if (b.mask[1/8] & (1 << 1 % 8)) != 0 {
		return nil, errors.New("C.F3 field is not provided")
	}

	return b.x, nil
}
