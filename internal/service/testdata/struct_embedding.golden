--- source code ---

			package main

			import "github.com/samber/mo"
			import "time"
	
			//go:generate gosb -source=input.go
			type A struct {
				B
				*C
				mo.Option[int]
				*mo.Future[int]
				time.Time
				F1 int
			}

			type B struct {
				F1 int
			}

			type C struct {
				F1 int
			}


--- generated code ---

// Code generated by go-struct-builder. DO NOT EDIT.
// Source: input.go

package main

import (
	"errors"
	"time"

	"github.com/samber/mo"
)

type ABuilder struct {
	x    *A
	mask []byte
}

func NewABuilder() *ABuilder {
	/**
	Required fields:
	1) B B
	2) Time time.Time
	3) F1 int
	*/

	return &ABuilder{
		x:    new(A),
		mask: []byte{0x6},
	}
}

func (b *ABuilder) SetB(v B) *ABuilder {
	b.x.B = v
	b.mask[1/8] &= ^uint8(1 << 1 % 8)
	return b
}

func (b *ABuilder) SetC(v *C) *ABuilder {
	b.x.C = v
	return b
}

func (b *ABuilder) SetOption(v mo.Option[int]) *ABuilder {
	b.x.Option = v
	return b
}

func (b *ABuilder) SetFuture(v *mo.Future[int]) *ABuilder {
	b.x.Future = v
	return b
}

func (b *ABuilder) SetTime(v time.Time) *ABuilder {
	b.x.Time = v
	b.mask[2/8] &= ^uint8(1 << 2 % 8)
	return b
}

func (b *ABuilder) SetF1(v int) *ABuilder {
	b.x.F1 = v
	b.mask[3/8] &= ^uint8(1 << 3 % 8)
	return b
}

func (b *ABuilder) Build() (*A, error) {
	if (b.mask[1/8] & (1 << 1 % 8)) != 0 {
		return nil, errors.New("A.B field is not provided")
	}

	if (b.mask[2/8] & (1 << 2 % 8)) != 0 {
		return nil, errors.New("A.Time field is not provided")
	}

	if (b.mask[3/8] & (1 << 3 % 8)) != 0 {
		return nil, errors.New("A.F1 field is not provided")
	}

	return b.x, nil
}
